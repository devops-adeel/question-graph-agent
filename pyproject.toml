[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "question-graph-agent"
version = "0.1.0"
description = "An intelligent Q&A agent with graph-based memory using pydantic_graph and Graphiti"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    { name = "Question Graph Agent Team", email = "contact@example.com" },
]
keywords = [
    "ai",
    "agent",
    "question-answering",
    "knowledge-graph",
    "graphiti",
    "pydantic",
    "learning",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core dependencies
    "pydantic>=2.5.0",
    "pydantic-ai>=0.0.13",
    "pydantic-graph>=0.1.0",
    "logfire>=0.26.0",
    
    # Graphiti and graph database
    "graphiti-core>=0.3.0",
    "neo4j>=5.14.0",
    
    # AI/ML dependencies
    "openai>=1.12.0",
    "groq>=0.5.0",
    
    # Async and concurrency
    "asyncio>=3.4.3",
    "aiofiles>=23.2.1",
    
    # Data processing
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "click>=8.1.0",
    "rich>=13.7.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    
    # Code quality
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.5.0",
    "pylint>=2.17.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.22.0",
]

nlp = [
    # Advanced NLP capabilities (for future enhancement)
    "transformers>=4.35.0",
    "sentence-transformers>=2.2.0",
    "spacy>=3.6.0",
    "nltk>=3.8.0",
]

viz = [
    # Visualization tools
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    "networkx>=3.1.0",
    "pyvis>=0.3.2",
]

all = [
    "question-graph-agent[dev,nlp,viz]",
]

[project.urls]
Homepage = "https://github.com/yourusername/question-graph-agent"
Documentation = "https://question-graph-agent.readthedocs.io"
Repository = "https://github.com/yourusername/question-graph-agent.git"
Issues = "https://github.com/yourusername/question-graph-agent/issues"

[project.scripts]
question-graph = "question_graph:main"
qga = "question_graph:main"  # Short alias

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "logfire.*",
    "neo4j.*",
    "graphiti.*",
    "groq.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0622",  # redefined-builtin
]

[tool.pylint.format]
max-line-length = 100

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]